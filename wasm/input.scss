@use "sass:color";
@use "sass:meta";

@import url("https://fonts.googleapis.com/css2?family=Martian+Mono:wdth@99&display=swap");

// The color of the background in dark mode.
$dark-background: #1c1c1c;
// The base color of the buttons, without alpha.
$button-color: #7f7f7f;
// The alpha channel of the button color, with unit of percent.
$button-opacity: 35%;
// A unitless value representing the width of the main element relative to the width of the screen, when applicable.
$main-scale-fraction: 0.78;
// The maximum width of the main element, with unit of em. Chosen somewhat arbitrarily to be around 1200px.
$main-max-width: 75em;
// The minimum width of the screen at which the main and footer elements have responsive width. Chosen somewhat
// arbitrarily so that the width of the main element is around 600px.
$min-responsive-screen-width: calc(37.5em / $main-scale-fraction);
// The width of the screen at which the main element has its maximum width.
$max-responsive-screen-width: calc($main-max-width / $main-scale-fraction);
// The horizontal padding of the footer element when applicable, with unit of vw.
$footer-scaling-padding: 16vw;

@function padding-from-width($width, $parent-width: 100%) {
    @return calc(($parent-width - $width) / 2);
}

pre,
code,
textarea {
    font: 0.8em / 1.23 "Martian Mono", monospace;
}

a {
    &:visited {
        color: darkviolet;
    }
    @media screen and (prefers-color-scheme: dark) {
        color: royalblue;
        &:visited {
            color: blueviolet;
        }
    }
}

body {
    font-family: sans-serif;
    -webkit-text-size-adjust: 100%;
    margin: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    @media screen and (prefers-color-scheme: dark) {
        color: whitesmoke;
        background-color: $dark-background;
    }
}

fieldset {
    border: none;
    padding: 0 0 0.4em;
    margin: 0 0.5rem;
}

button {
    background-color: color.change($button-color, $alpha: calc($button-opacity / 100%));
    color: inherit;
    border: 0.125rem inset transparent;
    border-radius: 0.375em;
    font-size: 0.8rem;
    margin: 0.4em 0.25em 0.4em 0;
    text-transform: none;
    padding: 0.15em 0.325em 0.125em;
    text-align: center;
    &:disabled {
        opacity: 60%;
    }
    &:active {
        border-color: color.mix($button-color, white, $button-opacity);
        @media screen and (prefers-color-scheme: dark) {
            border-color: color.mix($button-color, $dark-background, $button-opacity);
        }
    }
}

textarea {
    background-color: inherit;
    color: inherit;
}

main {
    margin: 0 auto;
}

footer {
    box-sizing: border-box;
    width: 100%;
    background-color: #ebebeb;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap-reverse;
    @media screen and (prefers-color-scheme: dark) {
        background-color: #2c2c2c;
    }
}

@media screen and (max-width: $min-responsive-screen-width) {
    footer {
        flex-direction: column-reverse;
        padding: 0.5em;
        * {
            text-align: center;
        }
    }
}

@media screen and (min-width: $min-responsive-screen-width) {
    footer {
        align-items: last baseline;
    }
    @media (max-width: $max-responsive-screen-width) {
        main {
            width: calc(100vw * $main-scale-fraction);
        }
        footer {
            padding: 1em max($footer-scaling-padding, 1em);
        }
    }
}

@media screen and (min-width: $max-responsive-screen-width) {
    main {
        width: $main-max-width;
    }
    footer {
        $responsive-width-fraction: calc(1 - 2 * $footer-scaling-padding / 100vw);
        $max-width: calc($main-max-width * $responsive-width-fraction / $main-scale-fraction);
        padding: 1em padding-from-width($max-width);
    }
}

.hide-slow {
    visibility: hidden;
    opacity: 0;
    transition: visibility 0s 2s, opacity 2s linear;
}

.spacer {
    flex: 1 2;
}

.out-container {
    overflow: auto;
    min-height: 0;
    box-sizing: border-box;
}

.center {
    text-align: center;
}

.hidden,
.content-hidden * {
    display: none;
}

.grid {
    padding-top: 0.5em;
    display: grid;
    overflow-y: hidden;
    box-sizing: border-box;
    >* {
        margin-left: 0.5rem;
        margin-right: 0.5rem;
    }
}

:empty {
    margin: 0;
}

.out-container :first-child {
    margin: 0;
    padding: 0.5em 0;
    background-color: white;
    top: 0;
    left: 0;
    @media screen and (prefers-color-scheme: dark) {
        background-color: $dark-background;
    }
}

#stderr {
    color: crimson;
}

#input-container {
    display: flex;
    flex-direction: column;
    justify-content: end;
    align-items: start;
    grid-area: i;
}

#program-container {
    grid-area: p;
    min-width: 0;
}

#clear-container {
    grid-area: c;
}

#stdout-container {
    grid-area: o;
}

#stderr-container {
    grid-area: e;
}

#url-out {
    word-wrap: break-word;
    max-width: 100%;
}

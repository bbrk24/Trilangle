class Colors
  entries: { color: string, div?: HTMLDivElement, threadNumber?: number }[] = [
    { color: 'rgb(0, 173, 0)' },
    { color: 'rgb(255, 40, 255)' },
    { color: 'rgb(49, 151, 255)' },
    { color: 'rgb(187, 142, 29)' },
    { color: 'rgb(255, 93, 94)' },
    { color: 'rgb(28, 166, 159)' },
    { color: 'rgb(199, 117, 219)' },
    { color: 'rgb(255, 97, 38)' },
  ]
  dummy?: HTMLElement
  
  hideHighlights(): void
    for entry of @entries
      entry.div?.remove()
      entry.threadNumber = undefined
  
  destroyHighlights(): void
    for entry of @entries
      entry.div?.remove()
      entry.div = undefined
      entry.threadNumber = undefined

  getHighlightDiv(threadNumber: number)
    entry := (@entries.find &.threadNumber is threadNumber) ?? @entries.find not &.threadNumber?
    if entry?
      entry.threadNumber = threadNumber
      entry.div ?=
        document.createElement 'div'
        ||> .classList.add 'highlight'
        // @ts-expect-error What do you mean style is readonly
        ||> .style = `--highlight-color: ${entry.color};`

  allColors()
    @entries.map .color
  
  addColor(color: string)
    @dummy ?= document.createElement 'div'
    @dummy.style.backgroundColor = color
    color = @dummy.style.backgroundColor
    return false if (@entries.find &.color is color)?
    @entries.push { color }
    true
  
  removeColor(color: string | number)
    let idx
    if typeof color is 'string'
      idx = @entries.findIndex &.color is color
      return false if idx < 0
    else if color in @entries
      idx = color
    else
      return false
    entry := @entries[idx]
    if entry.threadNumber?
      replacement := @entries.find not &.threadNumber?
      return false unless replacement?
      entry.div?.style.setProperty '--highlight-color', replacement.color
      replacement{div,threadNumber} = entry
    @entries.splice idx, 1
    true

  /**
   * Replace a color.
   * @param before The current color, or its index in the allColors array.
   * @param after The new CSS color value.
   * @returns The thread number associated with the color. -1 if the replacement was unsuccessful, such as if the
   * old color could not be found. Nullish if the color is not used for any thread.
   */
  replaceColor(before: string | number, after: string)
    let entry
    if typeof before is 'string'
      entry = @entries.find &.color is before
      return -1 unless entry?
    else if before in @entries
      entry = @entries[before]
    else
      return -1

    @dummy ?= document.createElement 'div'
    @dummy.style.backgroundColor = after
    color := @dummy.style.backgroundColor
    return -1 if (@entries.find &.color is color)?
    entry.color = color
    entry.div?.style.setProperty '--highlight-color', color
    entry.threadNumber

  count() @entries.length

  [Symbol.toStringTag] = 'Colors'

export type { Colors }

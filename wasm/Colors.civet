class Colors
  #entries: { color: string, div?: HTMLDivElement, threadNumber?: number }[] = [
    { color: 'rgb(0, 173, 0)' },
    { color: 'rgb(255, 40, 255)' },
    { color: 'rgb(49, 151, 255)' },
    { color: 'rgb(187, 142, 29)' },
    { color: 'rgb(255, 93, 94)' },
    { color: 'rgb(28, 166, 159)' },
    { color: 'rgb(199, 117, 219)' },
    { color: 'rgb(255, 97, 38)' },
  ]
  #dummy?: HTMLElement

  hideHighlights(): void
    for entry of #entries
      entry.div?.remove()
      entry.threadNumber = undefined

  destroyHighlights(): void
    for entry of #entries
      entry.div?.remove()
      entry.div = undefined
      entry.threadNumber = undefined

  getHighlightDiv(threadNumber: number)
    entry := (#entries.find .threadNumber is threadNumber) ?? #entries.find not .threadNumber?
    if entry?
      entry.threadNumber = threadNumber
      entry.div ?=
        document.createElement 'div'
        ||> .classList.add 'highlight'
        ||> .style.setProperty '--highlight-color', entry.color

  allColors() #entries.map .color

  addColor(color: string)
    #dummy ?= document.createElement 'div'
    #dummy.style.backgroundColor = color
    color = #dummy.style.backgroundColor
    return false if #entries.some .color is color
    #entries.push { color }
    true

  removeColor(color: string | number)
    let idx: number
    if color <? 'string'
      idx = #entries.findIndex .color is color
      return false if idx < 0
    else if color in #entries
      idx = color
    else
      return false
    entry := #entries[idx]
    if entry.threadNumber?
      replacement := #entries.find not .threadNumber?
      return false unless replacement?
      entry.div?.style.setProperty '--highlight-color', replacement.color
      replacement{div,threadNumber} = entry
    #entries.splice idx, 1
    true

  /**
   * Replace a color.
   * @param before The current color, or its index in the allColors array.
   * @param after The new CSS color value.
   * @returns The thread number associated with the color. -1 if the replacement was unsuccessful, such as if the
   * old color could not be found. Nullish if the color is not used for any thread.
   */
  replaceColor(before: string | number, after: string)
    let entry
    if before <? 'string'
      entry = #entries.find .color is before
      return -1 unless entry?
    else if before in #entries
      entry = #entries[before]
    else
      return -1

    #dummy ?= document.createElement 'div'
    #dummy.style.backgroundColor = after
    color := #dummy.style.backgroundColor
    return -1 if #entries.some .color is color
    entry.color = color
    entry.div?.style.setProperty '--highlight-color', color
    entry.threadNumber

  get #() #entries#

  [Symbol.toStringTag] = 'Colors'

  randomColor()
    interface Luv
      L: number
      u: number
      v: number

    // #ff0000, #00ff00, and #0000ff in CIELUV space
    RED := { L: 53.2328818, u: 172.93531, v: 42.8274281 } as const satisfies Luv
    GREEN := { L: 87.7370335, u: -86.5701309, v: 115.769016 } as const satisfies Luv
    BLUE := { L: 32.3025867, u: -10.6849381, v: -127.277647 } as const satisfies Luv

    // Gamma correction constant
    INV_GAMMA := 0.416666667 as const

    RED_ANGLE := Math.atan2 RED.v, RED.u
    GREEN_ANGLE := Math.atan2 GREEN.v, GREEN.u
    BLUE_ANGLE := Math.atan2 BLUE.v, BLUE.u

    // Select a random hue and saturation
    hueAngle := 2 * Math.PI * (Math.random() - 0.5)
    relativeSat := Math.sqrt Math.random()

    // find the point on the edge of the RGB triangle with the selected hue
    let p1: Luv, p2: Luv
    if RED_ANGLE <= hueAngle < GREEN_ANGLE
      p1 = RED
      p2 = GREEN
    else if BLUE_ANGLE <= hueAngle < RED_ANGLE
      p1 = BLUE
      p2 = RED
    else
      p1 = GREEN
      p2 = BLUE
    slope := (p2.v - p1.v) / (p2.u - p1.u)
    u .= (p1.u * slope - p1.v) / (slope - Math.tan hueAngle)
    v .= slope * (u - p1.u) + p1.v
    // Given v*, interpolate L* between the corners
    shiftAmount := (v - p2.v) / (p1.v - p2.v)
    L .= p1.L * shiftAmount + p2.L * (1 - shiftAmount)

    // Scale u* and v* by the saturation
    u *= relativeSat
    v *= relativeSat
    // Scale L*, but centered at 50 rather than 0
    L = (L - 50) * relativeSat + 50
    // The point (u*=0,v*=0,L*=50) actually lies a little below the triangle formed by red, green, and blue:
    // https://www.desmos.com/3d/c8aec09879 so colors with lower saturation will also be slightly darker than they
    // should be. I think it's fine.

    // Convert from L*u*v* to XYZ
    uPrime := u / (13 * L) + 0.2009
    vPrime := v / (13 * L) + 0.461
    Y := ((L + 16) / 116) ** 3
    X := Y * 9 * uPrime / (4 * vPrime)
    Z := Y * (12 - 3 * uPrime - 20 * vPrime) / (4 * vPrime)

    // Convert XYZ to linear RGB
    linR := 3.2406 * X - 1.5372 * Y - 0.4986 * Z
    linG := -0.9689 * X + 1.8758 * Y + 0.0415 * Z
    linB := 0.0557 * X - 0.204 * Y + 1.057 * Z

    // Gamma-compress
    R: Math.round 255 * linR ** INV_GAMMA || 0
    G: Math.round 255 * linG ** INV_GAMMA || 0
    B: Math.round 255 * linB ** INV_GAMMA || 0

export type { Colors }

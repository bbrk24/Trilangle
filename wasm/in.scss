@use "sass:color";
@use "sass:meta";
@import "https://fonts.googleapis.com/css2?family=Martian+Mono:wdth@99&display=swap";

// The color of the background in dark mode.
$dark-background: #1c1c1c;

// The base color of the buttons, without alpha.
$button-color: #7f7f7f;

// The alpha channel of the button color, with unit of percent.
$button-opacity: 35%;

// A unitless value representing the width of the main element relative to the width of the screen, when applicable.
$main-scale-fraction: 0.78;

// The maximum width of the main element, with unit of em. Chosen somewhat arbitrarily to be around 1200px.
$main-max-width: 75em;

// The minimum width of the screen at which the main and footer elements have responsive width. Chosen somewhat
// arbitrarily so that the width of the main element is around 600px.
$min-responsive-screen-width: 37.5em;

// The width of the screen at which the main element has its maximum width.
$max-responsive-screen-width: calc($main-max-width / $main-scale-fraction);

// The horizontal padding of the footer element when applicable, with unit of vw.
$footer-scaling-padding: 16vw;

// The top border of the footer. Only visible in high-contrast mode.
$footer-border: 1px;

// The number of columns in a textarea by default, with unit of ch.
$textarea-cols: 45ch;

// The width of 1 monospace character, with a unit of em/ch. Unfortunately, I have to hardcode this.
// Actual measurements:
// 0.556750 with Blink
// 0.557292 with Gecko
// 0.5655   with Webkit
// The number below is the average of the three.
$monospace-ch: calc(0.559847em / 1ch);

// The horizontal padding of each column.
$column-padding: 0.5em;

// The width of the screen at which it switches to two-column layout.
$min-two-col-width: calc(2 * ($column-padding * 2 + $textarea-cols * $monospace-ch) / $main-scale-fraction);

@function padding-from-width($width, $parent-width: 100%) {
    @return calc(($parent-width - $width) / 2);
}

pre,
code,
textarea {
    font: 0.8em / 1.23 "Martian Mono", monospace;
}

a {
    color: #003df7;

    &:visited {
        color: #8e00cc;
    }

    .dark & {
        color: #5e86ff;

        &:visited {
            color: #b668ff;
        }
    }

    .dark.high-contrast & {
        color: #688eff;

        &:visited {
            color: #bb72ff;
        }
    }
}

body {
    font-family: sans-serif;
    -webkit-text-size-adjust: 100%;
    margin: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
}

textarea {
    max-width: 100%;
    box-sizing: border-box;
    padding: 0.125rem;
    border-width: 0.125rem;
}

// https://stackoverflow.com/q/75921120/
:root {
    --bg-color: white;
    --text-color: black;
}

.dark {
    --bg-color: #{$dark-background};
    --text-color: whitesmoke;
}

.dark.high-contrast {
    --bg-color: black;
    --text-color: white;
}

body,
textarea,
.out-container :first-child {
    background-color: var(--bg-color);
    color: var(--text-color);
}

fieldset {
    border: none;
    padding: 0 0 0.4em;
    margin-top: 0;
    margin-bottom: 0;
}

button {
    background-color: color.change($button-color, $alpha: calc($button-opacity / 100%));
    border: 0.125em solid transparent;
    color: var(--text-color);
    border-radius: 0.375em;
    font-size: 0.8rem;
    margin: 0.4em 0.25em 0.4em 0;
    text-transform: none;
    padding: 0.15em 0.325em 0.125em;
    text-align: center;

    .high-contrast & {
        border-color: var(--text-color);
        background-color: transparent;
    }

    &:disabled {
        opacity: 0.6;
    }

    &:active {
        border-style: inset;
        border-color: color.mix($button-color, white, $button-opacity);
    }

    .dark &:active {
        border-color: color.mix($button-color, $dark-background, $button-opacity);
    }

    .high-contrast &:active {
        border-style: solid;
        color: activetext;
        border-color: activetext;
    }

    .high-contrast &:disabled {
        opacity: 1;
        color: graytext;
        border-color: graytext;
    }
}

main {
    margin: 0 auto;
    padding-top: 0.5em;
    overflow-y: hidden;

    > * {
        margin-left: $column-padding;
        margin-right: $column-padding;
    }
}

footer {
    box-sizing: border-box;
    width: 100%;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap-reverse;
    background-color: #ebebeb;
    border-top: $footer-border solid transparent;

    .dark & {
        background-color: #2c2c2c;
    }

    .high-contrast & {
        background-color: transparent;
        border-top-color: var(--text-color);
    }
}

@media screen and (max-width: $min-responsive-screen-width) {
    footer {
        flex-direction: column-reverse;
        padding: 0.5em;

        * {
            text-align: center;
        }
    }
}

@media screen and (min-width: $min-responsive-screen-width) {
    footer {
        align-items: last baseline;
    }

    @media (max-width: $max-responsive-screen-width) {
        main {
            width: max($min-responsive-screen-width, calc(100vw * $main-scale-fraction));
        }

        footer {
            padding: 1em max($footer-scaling-padding, 1em);
        }
    }
}

@media screen and (min-width: $max-responsive-screen-width) {
    main {
        width: $main-max-width;
    }

    footer {
        $responsive-width-fraction: calc(1 - 2 * $footer-scaling-padding / 100vw);
        $max-width: calc($main-max-width * $responsive-width-fraction / $main-scale-fraction);

        padding: 1em padding-from-width($max-width);
    }
}

.hide-slow {
    visibility: hidden;
    opacity: 0;
    transition: visibility 0s 2s, opacity 2s linear;
}

.spacer {
    flex: 1 2;
}

.out-container {
    overflow: auto;
    min-height: 0;
    box-sizing: border-box;
}

.center {
    text-align: center;
}

.hidden,
.content-hidden * {
    display: none;
}

.grid {
    display: grid;
    box-sizing: border-box;
}

:empty {
    margin: 0;
}

.out-container :first-child {
    margin: 0;
    padding: 0.5em 0;
}

// Rules for .switch and .slider adapted from https://www.w3schools.com/howto/howto_css_switch.asp
.switch {
    display: inline-block;
    width: 1.8em;
    height: 1em;
    position: relative;
    margin: 0 0.75ch;

    input {
        opacity: 0;
        width: 0;
        height: 0;
    }
}

.slider {
    position: absolute;
    cursor: pointer;
    inset: 0;
    background-color: dimgray;
    transition: 0.4s;
    border-radius: 1em;

    &::before {
        position: absolute;
        content: "";
        height: 0.8em;
        width: 0.8em;
        left: 0.1em;
        bottom: 0.1em;
        background-color: white;
        transition: background-color 0s 0s, transform 0.2s ease-in;
        border-radius: 50%;
    }

    .high-contrast & {
        background-color: var(--text-color);

        &::before {
            background-color: var(--bg-color);
        }
    }

    input:checked + & {
        background-color: #148746;

        .high-contrast & {
            background-color: #0f6635;
        }

        .dark & {
            background-color: #1ab25c;
        }

        &::before {
            transform: translateX(0.8em);
        }
    }
}

@media screen and (max-width: $min-two-col-width) {
    textarea {
        width: min(100%, $textarea-cols);
    }

    main {
        grid-template:
            "p"
            "i"
            "c"
            "o"
            "e" / 1fr;
    }
}

@media screen and (min-width: $min-two-col-width) {
    textarea {
        width: $textarea-cols;
    }

    main {
        height: calc(100vh - (2lh + 2em + $footer-border));
        grid-template:
            "p i" min-content
            "c ." min-content
            "o e" 1fr / 1fr 1fr;
    }

    footer > * {
        flex: 1 0;
    }

    .out-container {
        padding-bottom: 1em;

        :first-child {
            position: sticky;
            top: 0;
            left: 0;
        }
    }

    #stdin {
        resize: horizontal;
    }
}

#stderr {
    color: #b70024;

    .dark & {
        color: #ff214d;
    }

    .dark.high-contrast & {
        color: #ff597a;
    }
}

#input-container {
    display: flex;
    flex-direction: column;
    justify-content: end;
    align-items: start;
    grid-area: i;
}

#program-container {
    grid-area: p;
    min-width: 0;
}

#clear-container {
    grid-area: c;
}

#stdout-container {
    grid-area: o;
}

#stderr-container {
    grid-area: e;
}

#url-out {
    word-wrap: break-word;
    max-width: 100%;
}

#menu .grid {
    max-width: 100%;
    grid-template-columns: 1fr;
    margin: 0 1lh -0.5em;

    > span {
        display: flex;
        flex-wrap: wrap;
        margin-left: auto;
        justify-content: center;
        align-items: center;
        z-index: 1;
    }
}

@media screen and (min-width: $min-two-col-width) {
    #menu {
        height: 0;
        overflow: visible;
        width: calc((1 - $main-scale-fraction) * 50vw);

        .grid {
            width: max-content;
            margin: 0 auto;
        }
    }
}
